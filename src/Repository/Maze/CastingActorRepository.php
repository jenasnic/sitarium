<?php

namespace App\Repository\Maze;

use App\Entity\Maze\CastingActor;
use App\Entity\Maze\Movie;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CastingActorRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CastingActorRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CastingActor::class);
    }

    /**
     * Allows to get actors with both specified movies.
     *
     * @param Movie first movie with searched actors in casting
     * @param Movie second movie with searched actors in casting
     *
     * @return CastingActor[]|array
     */
    public function getActorsWithMovies(Movie $movie1, Movie $movie2): array
    {
        return $this->createQueryBuilder('actor')
            ->where(':movie1 MEMBER OF actor.movies')
            ->andWhere(':movie2 MEMBER OF actor.movies')
            ->setParameter('movie1', $movie1)
            ->setParameter('movie2', $movie2)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Allows to get first actor found with both specified movies.
     *
     * @param Movie first movie with searched actor in casting
     * @param Movie second movie with searched actor in casting
     *
     * @return CastingActor|null
     */
    public function findTopActorWithMovies(Movie $movie1, Movie $movie2): ?CastingActor
    {
        $queryBuilder = $this->createQueryBuilder('actor')
            ->where(':movie1 MEMBER OF actor.movies')
            ->andWhere(':movie2 MEMBER OF actor.movies')
            ->setParameter('movie1', $movie1)
            ->setParameter('movie2', $movie2)
            ->setMaxResults(1);
        ;

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    /**
     * Allows to clear casting for all movies.
     *
     * @return int deleted rows count
     */
    public function clearCasting(): int
    {
        return $this->createQueryBuilder('actor')
            ->delete()
            ->getQuery()
            ->execute()
        ;
    }
}

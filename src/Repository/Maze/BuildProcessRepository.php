<?php

namespace App\Repository\Maze;

use App\Entity\Maze\BuildProcess;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * BuildProcessRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BuildProcessRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, BuildProcess::class);
    }

    /**
     * @return bool
     */
    public function isProcessPending(): bool
    {
        $queryBuilder = $this->createQueryBuilder('buildProcess')
            ->where('buildProcess.endedAt is null')
        ;

        return count($queryBuilder->getQuery()->getResult()) > 0;
    }

    /**
     * @return BuildProcess|null
     */
    public function findPendingProcess(): ?BuildProcess
    {
        $queryBuilder = $this->createQueryBuilder('buildProcess')
            ->where('buildProcess.endedAt is null')
        ;

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param string $type
     *
     * @return BuildProcess|null
     */
    public function findPendingProcessByType(string $type): ?BuildProcess
    {
        $queryBuilder = $this->createQueryBuilder('buildProcess')
            ->andWhere('buildProcess.endedAt is null')
            ->andWhere('buildProcess.type = :type')
            ->setParameter('type', $type)
        ;

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param string $type
     */
    public function stopPendingProcess(string $type): void
    {
        $queryBuilder = $this->createQueryBuilder('buildProcess')
            ->update()
            ->set('buildProcess.endedAt', ':today')
            ->andWhere('buildProcess.endedAt is null')
            ->andWhere('buildProcess.type = :type')
        ;

        $queryBuilder->getQuery()->execute([
            'today' => new \DateTime(),
            'type' => $type,
        ]);
    }
}

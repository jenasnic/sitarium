<?php

namespace App\Repository\Maze;

use App\Enum\Maze\CastingStatus;
use App\Entity\Maze\Movie;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query\Expr;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Movie::class);
    }

    /**
     * Allows to get movies that doesn't have any actor.
     *
     * @return array Array of movies without actor credits (as Movie).
     */
    public function getMoviesWithoutActorCredit(): array
    {
        return $this->createQueryBuilder('movie')
            ->where('SIZE(movie.actors) = 0')
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Allows to reset movies' status to default (i.e. actor_credits_to_check).
     *
     * @return int Updated rows count.
     */
    public function resetMoviesStatus(): int
    {
        $queryBuilder = $this->createQueryBuilder('movie');

        return $queryBuilder->update()
            ->set('movie.status', $queryBuilder->expr()->literal(CastingStatus::UNINITIALIZED))
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    /**
     * Allows to find linked movies.
     *
     * @param array (optionnal) $movieIds (default null) List of TMDB identifiers (as integer) for movies we want to get links.
     * Default value null means that we get links for all existing movies.
     *
     * @return array Array of linked movies using TMDB identifiers in a map with both keys : main_movie_identifier and linked_movie_identifier.
     * NOTE : unable to build same entity => use TMDB identifiers instead...
     */
    public function getLinkedMoviesId($movieIds = null)
    {
        $queryBuilder = $this->createQueryBuilder('main_movie');

        $queryBuilder
            ->select('main_movie.tmdbId as main_movie_identifier, linked_movie.tmdbId as linked_movie_identifier')
            ->distinct(true)
            ->leftJoin('main_movie.actors', 'common_actors')
            ->leftJoin('common_actors.movies', 'linked_movie', Expr\Join::WITH, $queryBuilder->expr()->neq('linked_movie.tmdbId', 'main_movie.tmdbId'))
        ;

        // Add condition on identifier for movies
        $queryBuilder->where('linked_movie.tmdbId IS NOT NULL');
        if ($movieIds != null) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->in('main_movie.tmdbId', $movieIds))
                ->andWhere($queryBuilder->expr()->in('linked_movie.tmdbId', $movieIds))
            ;
        }

        return $queryBuilder->getQuery()->getResult();
    }
}

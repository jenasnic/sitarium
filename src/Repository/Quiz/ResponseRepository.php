<?php

namespace App\Repository\Quiz;

use App\Entity\Quiz\Response;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * QuizResponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Response::class);
    }

    /**
     * Allows to check if response match for quiz.
     *
     * @param string $response Response we check if exist for quiz.
     * @param int $quizId Quiz we are searching for responses.
     *
     * @return Response|null Response matching specified parameters.
     */
    public function searchMatchingResponseForQuizId(string $response, int $quizId): ?Response
    {
        return $this
            ->createQueryBuilder('response')
            ->join('response.quiz', 'quiz')
            ->where('quiz.id = :quizId')
            ->andWhere('response.responses LIKE :response')
            ->setParameters([
                'quizId' => $quizId,
                'response' => sprintf('%%;%s;%%', $response),
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    /**
     * Allows to search response matching specified coordinates.
     *
     * @param int $positionX Coordonate X we are searching for responses.
     * @param int $positionY Coordonate Y we are searching for responses.
     * @param int $quizId Quiz we are searching for responses.
     *
     * @return array Array of responses matching specified paramters (as Response)
     */
    public function getResponsesWithCoordonates(int $coordonateX, int $coordonateY, int $quizId): array
    {
        return $this
            ->createQueryBuilder('response')
            ->join('response.quiz', 'quiz')
            ->where('quiz.id = :quizId')
            //->andWhere('(POWER(:coordonateX - qr.positionX, 2) + POWER(:coordonateY - qr.positionY, 2)) <= POWER(25 * POWER(2, (qr.size - 1)), 2)')
            ->andWhere(':coordonateX >= response.positionX')
            ->andWhere(':coordonateX <= response.positionX + 25 * POWER(2, (response.size))')
            ->andWhere(':coordonateY >= response.positionY')
            ->andWhere(':coordonateY <= response.positionY + 25 * POWER(2, (response.size))')
            ->setParameters([
                'quizId' => $quizId,
                'coordonateX' => $coordonateX,
                'coordonateY' => $coordonateY,
            ])
            ->getQuery()
            ->getResult()
        ;
    }
}

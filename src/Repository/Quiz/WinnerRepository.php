<?php

namespace App\Repository\Quiz;

use App\Entity\Quiz\Winner;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * WinnerRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WinnerRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Winner::class);
    }

    /**
     * @param int $quizId
     * @param string $name
     * @param int $page
     * @param int $maxPerPage
     *
     * @return Pagerfanta
     */
    public function getPagerForQuizId(int $quizId, ?string $name = null, int $page = 1, int $maxPerPage = 20): Pagerfanta
    {
        $queryBuilder = $this->createQueryBuilder('winner');

        $queryBuilder
            ->join('winner.quiz', 'quiz')
            ->andWhere('quiz.id = :quizId')
            ->setParameter('quizId', $quizId)
            ->orderBy('winner.date')
        ;

        if (null !== $name) {
            $queryBuilder
                ->join('winner.user', 'user')
                ->andWhere($queryBuilder->expr()->orX(
                    sprintf('user.firstname like \'%%%s%%\'', $name),
                    sprintf('user.lastname like \'%%%s%%\'', $name)
                ));
        }

        $paginator = new Pagerfanta(new DoctrineORMAdapter($queryBuilder));
        $paginator->setMaxPerPage($maxPerPage);
        $paginator->setCurrentPage($page);

        return $paginator;
    }

    /**
     * @param int $quizId
     *
     * @return Winner[]|array
     */
    public function getWinnersForQuizId(int $quizId): array
    {
        return $this
            ->createQueryBuilder('winner')
            ->join('winner.quiz', 'quiz')
            ->where('quiz.id = :quizId')
            ->setParameter('quizId', $quizId)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * @param int $quizId
     */
    public function removeWinnersForQuizId(int $quizId)
    {
        $winners = $this->getWinnersForQuizId($quizId);

        foreach ($winners as $winner) {
            $this->_em->remove($winner);
        }

        $this->_em->flush();
    }

    /**
     * @param int $userId
     *
     * @return Winner[]|array
     */
    public function getWinnersForUserId(int $userId): array
    {
        return $this
            ->createQueryBuilder('winner')
            ->join('winner.user', 'user')
            ->where('user.id = :userId')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * @param int $userId
     */
    public function removeWinnersForUserId(int $userId)
    {
        $winners = $this->getWinnersForUserId($userId);

        foreach ($winners as $winner) {
            $this->_em->remove($winner);
        }

        $this->_em->flush();
    }
}

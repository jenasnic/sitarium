<?php

namespace App\Repository;

use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends ServiceEntityRepository
{
    /**
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, User::class);
    }

    /**
     * @param string $role
     *
     * @return array
     */
    public function getUserWithRole($role): array
    {
        $queryBuilder = $this->createQueryBuilder('user');

        return $queryBuilder->where($queryBuilder->expr()->like('user', $role))
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Allows to check if mail is unique for user.
     *
     * @param string $mail
     * @param int $excludeUserId User identifier to exclude from unicity search (useful when editing user).
     *
     * @return bool TRUE if mail is unique, FALSE either.
     */
    public function checkMailUnicity($mail, $excludeUserId = null): bool
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->select('COUNT(user)')
            ->where('user.mail = :mail')
            ->setParameter('mail', $mail)
        ;

        if ($excludeUserId) {
            $queryBuilder
                ->andWhere('user.id <> :userId')
                ->setParameter('userId', $excludeUserId);
        }

        return ($queryBuilder->getQuery()->getSingleScalarResult() > 0) ? false : true;
    }

    /**
     * Allows to check if login is unique for user.
     * @param String $login Login we want to check unicity. NULL to ignore this parameter.
     * @param int $userId User identifier to exclude from unicity search (useful when editing user). 0 to ignore this parameter.
     * @return TRUE if login is unique, FALSE either.
     */
    public function checkLoginUnicity($login, $excludeUserId = null): bool
    {
        $queryBuilder = $this->createQueryBuilder('user')
            ->select('COUNT(user)')
            ->where('user.username = :login')
            ->setParameter('login', $login)
        ;

        if ($excludeUserId) {
            $queryBuilder
                ->andWhere('user.id <> :userId')
                ->setParameter('userId', $excludeUserId);
        }

        return ($queryBuilder->getQuery()->getSingleScalarResult() > 0) ? false : true;
    }
}
